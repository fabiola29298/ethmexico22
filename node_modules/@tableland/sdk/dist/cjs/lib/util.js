"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimeout = exports.defaultTimeout = exports.shouldRelay = exports.shouldSkipConfirm = exports.getPrefix = exports.waitConfirm = exports.camelCaseKeys = exports.SUPPORTED_CHAINS = exports.btoa = exports.getSigner = void 0;
const ethers_1 = require("ethers");
const camelcase_1 = __importDefault(require("camelcase"));
const evm = __importStar(require("@tableland/evm/proxies.js"));
function getSigner() {
    return __awaiter(this, void 0, void 0, function* () {
        yield globalThis.ethereum.request({ method: "eth_requestAccounts" });
        const provider = new ethers_1.ethers.providers.Web3Provider(globalThis.ethereum);
        const signer = provider.getSigner();
        return signer;
    });
}
exports.getSigner = getSigner;
// From https://www.npmjs.com/package/btoa
const polyfills = {
    btoa: function (str) {
        const buffer = Buffer.from(str, "binary");
        return buffer.toString("base64");
    },
};
exports.btoa = (_a = globalThis.btoa) !== null && _a !== void 0 ? _a : polyfills.btoa;
exports.SUPPORTED_CHAINS = {
    // Testnet
    "ethereum-goerli": {
        name: "goerli",
        phrase: "Ethereum Goerli",
        chainId: 5,
        contract: evm.proxies["ethereum-goerli"],
        host: "https://testnet.tableland.network",
        rpcRelay: true,
    },
    ethereum: {
        name: "ethereum",
        phrase: "Ethereum Mainnet",
        chainId: 1,
        contract: evm.proxies.ethereum,
        host: "https://testnet.tableland.network",
        rpcRelay: false,
    },
    "optimism-kovan": {
        name: "optimism-kovan",
        phrase: "Optimism Kovan",
        chainId: 69,
        contract: evm.proxies["optimism-kovan"],
        host: "https://testnet.tableland.network",
        rpcRelay: true,
    },
    "optimism-goerli": {
        name: "optimism-goerli",
        phrase: "Optimism Goerli",
        chainId: 420,
        contract: evm.proxies["optimism-goerli"],
        host: "https://testnet.tableland.network",
        rpcRelay: true,
    },
    optimism: {
        name: "optimism",
        phrase: "Optimism Mainnet",
        chainId: 10,
        contract: evm.proxies.optimism,
        host: "https://testnet.tableland.network",
        rpcRelay: false,
    },
    "arbitrum-goerli": {
        name: "arbitrum-goerli",
        phrase: "Arbitrum Goerli",
        chainId: 421613,
        contract: evm.proxies["arbitrum-goerli"],
        host: "https://testnet.tableland.network",
        rpcRelay: true,
    },
    "polygon-mumbai": {
        name: "maticmum",
        phrase: "Polygon Mumbai",
        chainId: 80001,
        contract: evm.proxies["polygon-mumbai"],
        host: "https://testnet.tableland.network",
        rpcRelay: true,
    },
    polygon: {
        name: "matic",
        phrase: "Polygon Mainnet",
        chainId: 137,
        contract: evm.proxies.polygon,
        host: "https://testnet.tableland.network",
        rpcRelay: false,
    },
    // staging
    "optimism-kovan-staging": {
        name: "optimism-kovan",
        phrase: "Optimism Kovan",
        chainId: 69,
        contract: evm.proxies["optimism-kovan-staging"],
        host: "https://staging.tableland.network",
        rpcRelay: true,
    },
    "optimism-goerli-staging": {
        name: "optimism-goerli",
        phrase: "Optimism Goerli",
        chainId: 420,
        contract: evm.proxies["optimism-goerli-staging"],
        host: "https://staging.tableland.network",
        rpcRelay: true,
    },
    "local-tableland": {
        name: "localhost",
        phrase: "Local Tableland",
        chainId: 31337,
        contract: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        host: "http://localhost:8080",
        rpcRelay: true,
    },
    // Testing
    custom: {
        name: "localhost",
        phrase: "Custom Chain",
        chainId: 31337,
        // If building locally you can put your contract address and host here or use the contract connection option
        contract: "",
        host: "",
        rpcRelay: true,
    },
};
// Take an Object with any symantic for key naming and return a new Object with keys that are lowerCamelCase
// Example: `camelCaseKeys({structure_hash: "123"})` returns `{structureHash: "123"}`
function camelCaseKeys(obj) {
    return Object.fromEntries(Object.entries(obj).map((entry) => {
        const key = entry[0];
        const val = entry[1];
        return [(0, camelcase_1.default)(key), val];
    }));
}
exports.camelCaseKeys = camelCaseKeys;
// Helper function to enable waiting until a transaction has been materialized by the Validator.
// Uses simple polling with exponential backoff up to a maximum timeout.
// Potential optimization could be had if the Validator supports subscribing to transaction
// receipts via Websockets or long-poling in the future
function waitConfirm(txnHash, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        // default timeout 2 minutes
        const timeout = getTimeout(options);
        // determines how often to check for materialization before timeout
        const rate = (_a = options === null || options === void 0 ? void 0 : options.rate) !== null && _a !== void 0 ? _a : 1500;
        const start = Date.now();
        // next tick then try immediately
        yield new Promise((resolve) => setTimeout(resolve, 0));
        let table = yield this.receipt(txnHash);
        let tries = 0;
        while (!table && start + timeout > Date.now()) {
            // increase the time between each call, but never go past the specified timeout
            const waitForMs = rate * Math.pow(2, tries);
            const nextTry = start + timeout < Date.now() + waitForMs
                ? start + timeout - Date.now()
                : waitForMs;
            yield new Promise((resolve) => setTimeout(resolve, nextTry));
            table = yield this.receipt(txnHash);
            tries++;
        }
        // Throw and let the caller decide what to do if the timeout is exceeded
        if (!table) {
            throw new Error(`timeout exceeded: could not get transaction receipt: ${txnHash}`);
        }
        return table;
    });
}
exports.waitConfirm = waitConfirm;
function getPrefix(options) {
    if (typeof options === "undefined")
        return "";
    return options.prefix || "";
}
exports.getPrefix = getPrefix;
function shouldSkipConfirm(options) {
    if (typeof options === "undefined")
        return false;
    return !!options.skipConfirm;
}
exports.shouldSkipConfirm = shouldSkipConfirm;
function shouldRelay(connection, options) {
    if (typeof options === "undefined")
        return connection.options.rpcRelay;
    if (typeof options.rpcRelay === "boolean") {
        return options.rpcRelay;
    }
    return connection.options.rpcRelay;
}
exports.shouldRelay = shouldRelay;
exports.defaultTimeout = 120 * 1000; // 2 mintues
function getTimeout(options) {
    if (typeof options === "undefined")
        return exports.defaultTimeout;
    if (typeof options.timeout !== "number")
        return exports.defaultTimeout;
    return options.timeout;
}
exports.getTimeout = getTimeout;
//# sourceMappingURL=util.js.map