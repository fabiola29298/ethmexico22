"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.write = exports.read = exports.resultsToObjects = void 0;
const tablelandCalls = __importStar(require("./tableland-calls.js"));
const ethCalls = __importStar(require("./eth-calls.js"));
const util_js_1 = require("./util.js");
const check_network_js_1 = require("./check-network.js");
function resultsToObjects({ rows, columns }) {
    return rows.map((row) => Object.fromEntries(row.map((k, i) => [columns[i].name, k])));
}
exports.resultsToObjects = resultsToObjects;
function read(query) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield tablelandCalls.read.call(this, query);
    });
}
exports.read = read;
function write(query, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const skipConfirm = (0, util_js_1.shouldSkipConfirm)(options);
        const doRelay = (0, util_js_1.shouldRelay)(this, options);
        if (doRelay) {
            const response = yield tablelandCalls.write.call(this, query);
            if (!skipConfirm)
                yield this.waitConfirm(response.hash);
            return response;
        }
        // We check the wallet and tableland chains match here again in
        // case the user switched networks after creating a siwe token
        yield check_network_js_1.checkNetwork.call(this);
        // ask the Validator if this query is valid, and get the tableId for use in SC call
        const { tableId } = yield tablelandCalls.validateWriteQuery.call(this, query);
        const txn = yield ethCalls.runSql.call(this, tableId, query);
        if (!skipConfirm)
            yield this.waitConfirm(txn.transactionHash);
        return { hash: txn.transactionHash };
    });
}
exports.write = write;
//# sourceMappingURL=query.js.map