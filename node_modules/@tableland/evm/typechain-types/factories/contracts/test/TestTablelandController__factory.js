"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestTablelandController__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "ERC721AQueryablePoliciesUnauthorized",
        type: "error",
    },
    {
        inputs: [],
        name: "ERC721EnumerablePoliciesUnauthorized",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedValue",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredValue",
                type: "uint256",
            },
        ],
        name: "InsufficientValue",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [],
        name: "REQUIRED_VALUE",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "caller",
                type: "address",
            },
        ],
        name: "getPolicy",
        outputs: [
            {
                components: [
                    {
                        internalType: "bool",
                        name: "allowInsert",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "allowUpdate",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "allowDelete",
                        type: "bool",
                    },
                    {
                        internalType: "string",
                        name: "whereClause",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "withCheck",
                        type: "string",
                    },
                    {
                        internalType: "string[]",
                        name: "updatableColumns",
                        type: "string[]",
                    },
                ],
                internalType: "struct ITablelandController.Policy",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "bars",
                type: "address",
            },
        ],
        name: "setBars",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "foos",
                type: "address",
            },
        ],
        name: "setFoos",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ffc8061007e6000396000f3fe6080604052600436106100705760003560e01c8063898e4aef1161004e578063898e4aef146100d55780638da5cb5b146100ff578063cefd981814610127578063f2fde38b1461014757600080fd5b80633791dc6a14610075578063715018a61461009e57806383f9a5dc146100b5575b600080fd5b610088610083366004610c36565b610167565b6040516100959190610e21565b60405180910390f35b3480156100aa57600080fd5b506100b3610487565b005b3480156100c157600080fd5b506100b36100d0366004610c36565b61049b565b3480156100e157600080fd5b506100f1670de0b6b3a764000081565b604051908152602001610095565b34801561010b57600080fd5b506000546040516001600160a01b039091168152602001610095565b34801561013357600080fd5b506100b3610142366004610c36565b6104c5565b34801561015357600080fd5b506100b3610162366004610c36565b6104ef565b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a082015234670de0b6b3a7640000146101d557604051631c102d6360e21b8152346004820152670de0b6b3a764000060248201526044015b60405180910390fd5b60408051600280825260608201909252600091816020015b60608152602001906001900390816101ed5750506040805160038082526080820190925291925060009190602082015b606081526020019060019003908161021d575050600154604080518082019091526006815265199bdbd7da5960d21b60208201529192506102699186916001600160a01b031690610568565b8260008151811061028a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506102d384600260009054906101000a90046001600160a01b03166040518060400160405280600681526020016518985c97da5960d21b81525061075a565b826001815181106102f457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020015b6060815260200190600190039081610316579050509050604051806040016040528060038152602001623130bd60e91b8152508160008151811061036a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180602001604052806000815250826000815181106103a657634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806007815260200166062617a203e20360cc1b815250826001815181106103f257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806020016040528060008152508260028151811061042e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060c0016040528060001515815260200160011515815260200160001515815260200161046885610977565b815260200161047684610977565b815260200191909152949350505050565b61048f610a6a565b6104996000610ac4565b565b6104a3610a6a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6104cd610a6a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6104f7610a6a565b6001600160a01b03811661055c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cc565b61056581610ac4565b50565b6040516370a0823160e01b81526001600160a01b0384811660048301526060918491600091908316906370a082319060240160206040518083038186803b1580156105b257600080fd5b505afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610d24565b90508061060a57604051630b61338f60e11b815260040160405180910390fd5b60008460405160200161061d9190610d97565b604051602081830303815290604052905060005b8281101561072d57604051632f745c5960e01b81526001600160a01b038981166004830152602482018390526000916106c591871690632f745c599060440160206040518083038186803b15801561068857600080fd5b505afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190610d24565b610b14565b9050816106f55782816040516020016106df929190610d68565b604051602081830303815290604052925061071a565b8281604051602001610708929190610dc0565b60405160208183030381529060405292505b508061072581610f55565b915050610631565b508060405160200161073f9190610dfc565b60408051808303601f19018152919052979650505050505050565b6040516370a0823160e01b81526001600160a01b0384811660048301526060918491600091908316906370a082319060240160206040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190610d24565b9050806107fc57604051633e72a67f60e01b815260040160405180910390fd5b604051632118854760e21b81526001600160a01b03878116600483015260009190841690638462151c9060240160006040518083038186803b15801561084157600080fd5b505afa158015610855573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087d9190810190610c64565b90506000856040516020016108929190610d97565b604051602081830303815290604052905060005b82518110156109495760006108e18483815181106108d457634e487b7160e01b600052603260045260246000fd5b6020026020010151610b14565b9050816109115782816040516020016108fb929190610d68565b6040516020818303038152906040529250610936565b8281604051602001610924929190610dc0565b60405160208183030381529060405292505b508061094181610f55565b9150506108a6565b508060405160200161095b9190610dfc565b60408051808303601f1901815291905298975050505050505050565b60608060005b8351811015610a63578381815181106109a657634e487b7160e01b600052603260045260246000fd5b602002602001015151600014156109bc57610a51565b815115610a0557816040518060400160405280600581526020016401030b732160dd1b8152506040516020016109f3929190610d68565b60405160208183030381529060405291505b81848281518110610a2657634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610a3f929190610d68565b60405160208183030381529060405291505b80610a5b81610f55565b91505061097d565b5092915050565b6000546001600160a01b031633146104995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610b385750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b625780610b4c81610f55565b9150610b5b9050600a83610efa565b9150610b3c565b60008167ffffffffffffffff811115610b8b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610bb5576020820181803683370190505b5090505b8415610c2e57610bca600183610f0e565b9150610bd7600a86610f70565b610be2906030610ee2565b60f81b818381518110610c0557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610c27600a86610efa565b9450610bb9565b949350505050565b600060208284031215610c47578081fd5b81356001600160a01b0381168114610c5d578182fd5b9392505050565b60006020808385031215610c76578182fd5b825167ffffffffffffffff80821115610c8d578384fd5b818501915085601f830112610ca0578384fd5b815181811115610cb257610cb2610fb0565b8060051b604051601f19603f83011681018181108582111715610cd757610cd7610fb0565b604052828152858101935084860182860187018a1015610cf5578788fd5b8795505b83861015610d17578051855260019590950194938601938601610cf9565b5098975050505050505050565b600060208284031215610d35578081fd5b5051919050565b60008151808452610d54816020860160208601610f25565b601f01601f19169290920160200192915050565b60008351610d7a818460208801610f25565b835190830190610d8e818360208801610f25565b01949350505050565b60008251610da9818460208701610f25565b64040d2dc40560db1b920191825250600501919050565b60008351610dd2818460208801610f25565b600b60fa1b9083019081528351610df0816001840160208801610f25565b01600101949350505050565b60008251610e0e818460208701610f25565b602960f81b920191825250600101919050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c06080850152610e6060e0850182610d3c565b90506080850151601f19808684030160a0870152610e7e8383610d3c565b60a0880151878203830160c089015280518083529194508501925084840190600581901b85018601875b82811015610ed45784878303018452610ec2828751610d3c565b95880195938801939150600101610ea8565b509998505050505050505050565b60008219821115610ef557610ef5610f84565b500190565b600082610f0957610f09610f9a565b500490565b600082821015610f2057610f20610f84565b500390565b60005b83811015610f40578181015183820152602001610f28565b83811115610f4f576000848401525b50505050565b6000600019821415610f6957610f69610f84565b5060010190565b600082610f7f57610f7f610f9a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fc1210e5da760c282c719e0101df260088e384e01792f2f6ed6e09cc64aa512a64736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class TestTablelandController__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.TestTablelandController__factory = TestTablelandController__factory;
TestTablelandController__factory.bytecode = _bytecode;
TestTablelandController__factory.abi = _abi;
//# sourceMappingURL=TestTablelandController__factory.js.map