import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { TablelandDeployments, TablelandDeploymentsInterface } from "../../../contracts/utils/TablelandDeployments";
declare type TablelandDeploymentsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TablelandDeployments__factory extends ContractFactory {
    constructor(...args: TablelandDeploymentsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TablelandDeployments>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TablelandDeployments;
    connect(signer: Signer): TablelandDeployments__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220baa4e75cfce5402d6c515acfea42211db55eed8b08446e282cc11b4f145071e964736f6c63430008040033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
    }[];
    static createInterface(): TablelandDeploymentsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TablelandDeployments;
}
export {};
//# sourceMappingURL=TablelandDeployments__factory.d.ts.map