import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ERC721AQueryablePolicies, ERC721AQueryablePoliciesInterface } from "../../../contracts/policies/ERC721AQueryablePolicies";
declare type ERC721AQueryablePoliciesConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ERC721AQueryablePolicies__factory extends ContractFactory {
    constructor(...args: ERC721AQueryablePoliciesConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ERC721AQueryablePolicies>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ERC721AQueryablePolicies;
    connect(signer: Signer): ERC721AQueryablePolicies__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220895bcd51fe852828d2f83a15605d019e55e53ca32b0afd88e4757fee4ee01e5d64736f6c63430008040033";
    static readonly abi: {
        inputs: never[];
        name: string;
        type: string;
    }[];
    static createInterface(): ERC721AQueryablePoliciesInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ERC721AQueryablePolicies;
}
export {};
//# sourceMappingURL=ERC721AQueryablePolicies__factory.d.ts.map